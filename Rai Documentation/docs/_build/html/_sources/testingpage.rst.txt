.. _testingpage:


===============
**testingpage**
===============


.. code-block:: bash 

 
 #data_path = "/data/adult/"
 train_data = pd.read_csv(data_path + "train.csv", header=0, skipinitialspace=True, na_values="?")
 test_data = pd.read_csv(data_path + "test.csv", header=0, skipinitialspace=True, na_values="?")
 all_data = pd.concat([train_data, test_data], ignore_index=True)


 # Get X and y data, as well as RAI Meta information from the Dataframe
 rai_meta_information, X, y, rai_output_feature = df_to_RAI(all_data, target_column="income-per-year", normalize="Scalar")

 # Create Data Splits and pass them to RAI
 xTrain, xTest, yTrain, yTest = train_test_split(X, y, random_state=1, stratify=y)
 dataset = Dataset({"train": NumpyData(xTrain, yTrain), "test": NumpyData(xTest, yTest)})

 # Create Model and RAIs representation of it
 clf = RandomForestClassifier(n_estimators=4, max_depth=6)
 model = Model(agent=clf, output_features=rai_output_feature, name="cisco_income_ai", predict_fun=clf.predict,
              predict_prob_fun=clf.predict_proba, description="Income Prediction AI", model_class="RFC")

 # Create RAI AISystem to pass all relevant data to RAI
 ai = AISystem(name="income_classification",  task='binary_classification', meta_database=rai_meta_information,
              dataset=dataset, model=model)

 configuration = {"fairness": {"priv_group": {"race": {"privileged": 1, "unprivileged": 0}},
                              "protected_attributes": ["race"], "positive_label": 1},
                 "time_complexity": "polynomial"}
 ai.initialize(user_config=configuration)

 # Train the model, generate predictions
 clf.fit(xTrain, yTrain)
 test_predictions = clf.predict(xTest)

 # Pass predictions to RAI
 ai.compute({"test": {"predict": test_predictions}}, tag='model')

 # View results computed by RAI
 ai.display_metric_values(display_detailed=True)
 analysis = AnalysisManager()
 result = analysis.run_analysis(ai, "test", "FairnessAnalysis")
 print(result["FairnessAnalysis"].to_string())



.. code-block:: bash 

 Analysis created
 ==== Group Fairness Analysis Results ====
 1 of 4 tests passed.

 Statistical Parity Difference Test:
 This metric is The difference of the rate of favorable outcomes received by the unprivileged group to the privileged group.    
 The idea value is 0.0.
 It's value of -0.11160752641979553 is not between between 0.1 and -0.1 indicating that there is unfairness.

 Equal Opportunity Difference Test:
 This metric is The difference of true positive rates between the unprivileged and the privileged groups.
 The true positive rate is the ratio of true positives to the total number of actual positives for a given group.
 The ideal value is 0. A value of < 0 implies higher benefit for the privileged group and a value > 0 implies higher benefit for the unprivileged group.
 It's value of -0.12121212121212122 is not between between 0.1 and -0.1 indicating that there is unfairness.








 
     


